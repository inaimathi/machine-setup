(add-to-list 'load-path (concat user-emacs-directory "mine"))
(require 'convenience)
(require 'packs)
(require 'aidev)

(require 'aidev-mode)
(aidev-global-mode 1)

(custom-set-faces '(default ((t (:height 220)))))

(setq inferior-lisp-program "sbcl --dynamic-space-size 2048")
(setq haskell-program-name "ghci-7.8.4")
(add-to-list 'load-path (expand-file-name "~/.nix-profile/share/emacs/site-lisp"))

;; cosmetics
(setq scroll-bar-mode-explicit t)
(set-scroll-bar-mode `right)
(setq js-indent-level 2)
(add-hook 'git-commit-mode-hook
	  '(lambda ()
	     (auto-fill-mode 0))
	  t)

;; custom modeline
(setq-default
 mode-line-format
 (list " " 'mode-line-modified			;; the "**" at the beginning
       "--" 'mode-line-buffer-identification	;; buffer file name
       "--" 'mode-line-modes			;; major and minor modes in effect
       'mode-line-position			;; line, column, file %
       "--" '(:eval (battery-status))
       "--" '(:eval (format-time-string "%I:%M" (current-time)))
       "-%-"))					;; dashes sufficient to fill rest of modeline.

(defun battery-status ()
  "Outputs the battery percentage from acpi."
  (replace-regexp-in-string
   ".*?\\([0-9]+\\)%.*" " Battery: \\1%% "
   (substring (shell-command-to-string "acpi") 0 -1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; general utility
(defun get-api-keys-from (fname)
  (mapcar
   (lambda (line)
     (let ((split (string-split (substring line 7) "=")))
       (setenv (first split) (second split))))
   (remove-if
    #'string-empty-p
    (string-lines
     (shell-command-to-string
      (format "cat %s | grep export | grep API_KEY" fname))))))

(get-api-keys-from "~/.bashrc")

(defun switch-to-minibuffer ()
  "Switch to minibuffer window."
  (interactive)
  (if (active-minibuffer-window)
      (select-window (active-minibuffer-window))
    (error "Minibuffer is not active")))

(add-hook
 'before-save-hook
 (lambda (&optional start end)
   (unless (string-match "\\.md" buffer-file-name) ;; markdown has syntactically significant trailing whitespace -_-
     (delete-trailing-whitespace start end))
   (when (string-match "\\.py" buffer-file-name)
     (unless (string-match "api.py" buffer-file-name)
       (py-isort-before-save)))))

(require 'magit)
(require 'aes)
(require 'highlight-parentheses)
(require 'yasnippet)
(yas/global-mode 1)

(require 'flex-autopair)
(add-to-list 'flex-autopair-pairs '(?\< . ?\>))
(add-to-list 'flex-autopair-pairs '(?\{ . ?\}))
(define-globalized-minor-mode global-autopair flex-autopair-mode
  (lambda () (flex-autopair-mode 1)))

;; unique buffer names (for similarly named files in different directories
(require 'uniquify)
(setq uniquify-buffer-name-style 'reverse
      uniquify-separator "/"
      uniquify-after-kill-buffer-p t ; rename after killing uniquified
      uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers

;; editing/general convenience addons
(global-mode highlight-parentheses-mode)
(global-mode column-number-mode)
;; (require 'redo+)
(require 'hideshow)
(require 'auto-complete-config)
(hooks (slime common-lisp emacs-lisp lisp python haskell)
       (lambda () (auto-complete-mode t)))

;;;;;;;;;; Markdown
(autoload 'markdown-mode "markdown-mode.el" "Major mode for editing Markdown files" t)
(hooks markdown
       (lambda ()
	 ;; Fuck you, Markdown mode, you don't get to re-bind tab
	 (flyspell-mode)
	 (flyspell-buffer)
	 (keys (current-local-map)
	       "C-c ," 'flyspell-goto-next-error
	       "C-c ." 'flyspell-correct-word-before-point
	       "<tab>" 'yas/expand)))

(by-ext ("md" "text") markdown-mode)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;; Python
(require 'flymake-python-pyflakes)
(require 'pyvenv)
(setq flymake-python-pyflake-sexecutable "flake8 --ignore=E501")
(setq python-shell-interpreter
      (let ((python-v (python-version)))
	(if (= (car python-v) 3)
	    "python"
	  "python3")))
(hooks python
       (lambda ()
	 (setq autopair-handle-action-fns
	       (list #'autopair-default-handle-action
		     #'autopair-python-triple-quote-action))
	 (keys (current-local-map)
	       "C-," 'flymake-goto-next-error
	       "C-." 'flymake-goto-prev-error)
	 (python-black-on-save-mode)
	 (flymake-python-pyflakes-load)))

;;;;;;;;;; Typescript/Javascript
(by-ext "js" rjsx-mode)
(setq-default typescript-indent-level 2)
(by-ext ("tsx") typescript-mode)
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1))

;; (add-hook 'before-save-hook 'tide-format-before-save)
(hooks typescript
       (lambda ()
	 (setup-tide-mode)
	 (setq indent-tabs-mode nil)
	 (keys (current-local-map)
	       "C-," 'flycheck-next-error
	       "C-." 'flycheck-prev-error))
       #'setup-tide-mode)

;;;;;;;;;; SML
(require 'sml-mode)
(by-ext ("ml" "sml") sml-mode)

;;;;;;;;;; Lisp
(load (expand-file-name "~/quicklisp/slime-helper.el"))
(slime-setup '(slime-fancy))
(require 'clojure-mode)
(autoload 'enable-paredit-mode "paredit"
  "Turn on pseudo-structural editing of Lisp code."
  t)

(eval-after-load 'paredit
  '(keys paredit-mode-map
	 "<C-left>" 'backward-sexp
	 "<C-right>" 'forward-sexp
	 "{" 'paredit-open-curly
	 "}" 'paredit-close-curly))

(hooks (common-lisp lisp emacs-lisp scheme lisp-interaction slime clojure slime-repl)
       'enable-paredit-mode
       (lambda () (set-syntax-table (set-syntax-table clojure-mode-syntax-table))))

(hooks emacs-lisp
       (lambda ()
	 (keys (current-local-map)
	       "C-c RET" 'macroexpand-point
	       "C-c C-c" 'eval-defun)))

(by-ext ("ss" "scm" "rkt") scheme-mode)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; global key changes
(keys (current-global-map)
      "C-x C-m" 'execute-extended-command
      "C-x m" 'execute-extended-command
      "C-x C-w" 'kill-ring-save
      "C-w" 'backward-kill-sexp

      "C-x C-j" (lambda () (interactive) (other-window -1))
      "C-x C-k" 'other-window
      "C-x C-l" 'switch-to-minibuffer

      "<f7>" 'call-last-kbd-macro
      "C-S-z" 'redo
      "C-z" 'undo

      "C-s" 'isearch-forward-regexp
      "C-r" 'isearch-backward-regexp
      "C-M-c" 'clipboard-kill-ring-save
      "C-x C-x" 'clipboard-kill-region
      "C-x C-'" 'comment-or-uncomment-region
      "C-x C-g" 'comment-or-uncomment-region
      "C-x t" 'eshell
      "C-x f" 'browse-url-at-point

      "C-+" 'default-text-scale-increase
      "C-=" 'default-text-scale-decrease
      "C-c =" 'default-text-scale-reset

      "C-x <C-left>" 'beginning-of-buffer
      "C-x <left>" 'beginning-of-buffer
      "C-x <C-right>" 'end-of-buffer
      "C-x <right>" 'end-of-buffer

      "<C-left>" 'backward-sexp
      "<C-right>" 'forward-sexp
      "C-f" 'forward-sexp
      "C-b" 'backward-sexp
      "C-M-b" 'backward-char
      "C-M-f" 'forward-char)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#242424" "#e5786d" "#95e454" "#cae682" "#8ac6f2" "#333366" "#ccaa8f" "#f6f3e8"])
 '(async-shell-command-buffer 'new-buffer)
 '(blog-default-blogger-title "language agnostic")
 '(blog-default-blogger-user 'leo\.zovic@gmail\.com)
 '(conv-color-map
   '(("env-pageclass" . "LightSalmon")
     ("env-metastore" . "LightGreen")
     ("env-pytrade" . "LightGoldenrod4")
     ("env-dupe-detection" . "LightBlue2")))
 '(custom-enabled-themes '(abyss))
 '(haskell-mode-hook
   '(turn-on-haskell-indent
     (lambda nil
       (auto-complete-mode t))))
 '(haskell-program-name "cabal repl" t)
 '(htmlize-output-type 'inline-css)
 '(icomplete-mode t)
 '(inf-ruby-implementations
   '(("ruby" . "irb2.1 --prompt default --noreadline -r irb/completion")
     ("jruby" . "jruby -S irb --prompt default --noreadline -r irb/completion")
     ("rubinius" . "rbx -r irb/completion")
     ("yarv" . "irb1.9 -r irb/completion")
     ("macruby" . "macirb -r irb/completion")
     ("pry" . "pry")))
 '(lpr-command "lp")
 '(menu-bar-mode nil)
 '(org-log-done 'note)
 '(package-selected-packages
   '(default-text-scale vue-mode company tide typescript-mode flycheck rjsx-mode sesman pyvenv dot-mode python-black slack pyenv-mode yaml-mode flycheck-pycheckers jedi flymake-python-pyflakes python-pylint cider clojure-mode haskell-mode markdown-mode paredit yasnippet auto-complete smart-tab highlight-parentheses aes elfeed))
 '(quack-programs
   '("racket" "bigloo" "cis" "csi" "csi -hygienic" "gosh" "gsi" "guile" "kawa" "mit-scheme" "mred -z" "mzscheme" "mzscheme -M errortrace" "mzscheme -il r6rs" "mzscheme -il typed-scheme" "mzscheme3m" "mzschemecgc" "rs" "scheme" "scheme48" "scsh" "sisc" "stklos" "sxi"))
 '(scheme-program-name "racket")
 '(show-paren-mode t)
 '(tool-bar-mode nil)
 '(tramp-copy-size-limit 1000000)
 '(tramp-default-method "ssh")
 '(tramp-inline-compress-start-size 1000000)
 '(transient-mark-mode t))
(put 'downcase-region 'disabled nil)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(git-commit-nonempty-second-line-face ((t (:inherit nil))))
 '(git-commit-overlong-summary-face ((t (:inherit nil))))
 '(git-commit-summary-face ((t (:inherit nil)))))

(put 'upcase-region 'disabled nil)

(set-colors-by (virtual-env-name))
