(add-to-list 'load-path user-emacs-directory)
(add-to-list 'load-path (concat user-emacs-directory "mine"))
(require 'convenience)
(require 'packs)
(require 'aidev)

(setq inferior-lisp-program "sbcl --dynamic-space-size 2048")
(setq haskell-program-name "ghci-7.8.4")
(add-to-list 'load-path (expand-file-name "~/.nix-profile/share/emacs/site-lisp"))

;; cosmetics
(setq scroll-bar-mode-explicit t)
(set-scroll-bar-mode `right)
(setq js-indent-level 2)
(add-hook 'git-commit-mode-hook
	  '(lambda ()
	     (auto-fill-mode 0))
	  t)

;; custom modeline
(setq-default
 mode-line-format
 (list " " 'mode-line-modified			;; the "**" at the beginning
       "--" 'mode-line-buffer-identification	;; buffer file name
       "--" 'mode-line-modes			;; major and minor modes in effect
       'mode-line-position			;; line, column, file %
       "--" '(:eval (battery-status))
       "--" '(:eval (format-time-string "%I:%M" (current-time)))
       "-%-"))					;; dashes sufficient to fill rest of modeline.

(defun battery-status ()
  "Outputs the battery percentage from acpi."
  (replace-regexp-in-string
   ".*?\\([0-9]+\\)%.*" " Battery: \\1%% "
   (substring (shell-command-to-string "acpi") 0 -1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; general utility
(defun switch-to-minibuffer ()
  "Switch to minibuffer window."
  (interactive)
  (if (active-minibuffer-window)
      (select-window (active-minibuffer-window))
    (error "Minibuffer is not active")))

(add-hook
 'before-save-hook
 (lambda (&optional start end)
   (delete-trailing-whitespace start end)
   (when (string-match "\\.py" buffer-file-name)
     (unless (or *switch?* (string-match "api.py" buffer-file-name))
       (py-isort-before-save)))))

(require 'magit)
(require 'aes)
(require 'highlight-parentheses)
(require 'yasnippet)
(yas/global-mode 1)

(require 'flex-autopair)
(add-to-list 'flex-autopair-pairs '(?\< . ?\>))
(add-to-list 'flex-autopair-pairs '(?\{ . ?\}))
(define-globalized-minor-mode global-autopair flex-autopair-mode
  (lambda () (flex-autopair-mode 1)))

;; unique buffer names (for similarly named files in different directories
(require 'uniquify)
(setq uniquify-buffer-name-style 'reverse
      uniquify-separator "/"
      uniquify-after-kill-buffer-p t ; rename after killing uniquified
      uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers

;; editing/general convenience addons
(global-mode highlight-parentheses-mode)
(global-mode column-number-mode)
;; (require 'redo+)
(require 'hideshow)
(require 'auto-complete-config)
(hooks (slime common-lisp emacs-lisp lisp python haskell)
       (lambda () (auto-complete-mode t)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; RSS-related
(require 'elfeed)
(setq elfeed-feeds
      '(("http://blog.inaimathi.ca/feed/atom" blog)
	("http://www.antipope.org/charlie/blog-static/atom.xml" blog)
	("http://existentialtype.wordpress.com/feed/" blog)
	("http://vile-jelly-blog.tumblr.com/rss" blog)

	("http://feeds.feedburner.com/RahdoTalksThrough" boardgames)
	("https://www.youtube.com/feeds/videos.xml?user=rahdo" boardgames)
	("http://kicktracker.inaimathi.ca/board-games" boardgames)

	("http://what-if.xkcd.com/feed.atom" comic)
	("http://xkcd.com/rss.xml" comic)
	("http://www.marycagle.com/rss.php" rare-comic)
	("http://www.lutherlevy.com/?feed=rss2" comic)
	("http://killsixbilliondemons.com/feed/" comic)
	("http://www.threepanelsoul.com/rss.php" rare-comic)
	("http://www.smbc-comics.com/rss.php" comic)

	;; ("http://stackexchange.com/feeds/tagsets/43442/inaimathi-lang-digests?sort=active" stack)
	;; ("http://stackexchange.com/feeds/tagsets/211649/inaimathi-js-digest?sort=newest" stack)
	))

(defun elfeed-search-copy-all ()
  (interactive)
  (save-excursion
    (beginning-of-buffer)
    (let ((links nil)
	  (cur (elfeed-search-selected :ignore-region)))
      (while cur
	(when (elfeed-tagged-p 'unread cur)
	  (push (elfeed-entry-link cur) links)
	  (elfeed-untag cur 'unread)
	  (elfeed-search-update-line))
	(forward-line)
	(setf cur (elfeed-search-selected :ignore-region)))
      (let ((res (mapconcat 'identity (reverse links) " ")))
	(kill-new res)
	(if (fboundp 'gui-set-selection)
	    (gui-set-selection elfeed-search-clipboard-type res)
	  (with-no-warnings
	    (x-set-selection elfeed-search-clipboard-type res)))))))

(hooks elfeed-search
       (lambda ()
	 (keys (current-local-map)
	       "Y" 'elfeed-search-copy-all)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; language/markup modes

;;;;;;;;;; Markdown
(autoload 'markdown-mode "markdown-mode.el" "Major mode for editing Markdown files" t)
(hooks markdown
       (lambda ()
	 ;; Fuck you, Markdown mode, you don't get to re-bind tab
	 (keys (current-local-map)
	       "<tab>" 'yas/expand)))

(by-ext ("md" "text") markdown-mode)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;; Python
(defvar *switch?*
  (string= "env-switch-api" (virtual-env-name)))
(unless *switch?*
  (require 'flymake-python-pyflakes)
  (setq flymake-python-pyflake-sexecutable "flake8"))
(setq python-shell-interpreter
      (let ((python-v (python-version)))
	(if (= (car python-v) 3)
	    "python"
	  "python3.7")))
(hooks python
       (lambda ()
	 (setq autopair-handle-action-fns
	       (list #'autopair-default-handle-action
		     #'autopair-python-triple-quote-action))
	 (keys (current-local-map)
	       "C-," 'flymake-goto-next-error
	       "C-." 'flymake-goto-prev-error)
	 (unless *switch?*
	   (python-black-on-save-mode)
	   (flymake-python-pyflakes-load))))

;;;;;;;;;; Typescript
(setq-default typescript-indent-level 2)
(by-ext ("tsx") typescript-mode)
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1))

;; (add-hook 'before-save-hook 'tide-format-before-save)
(hooks typescript
       (lambda ()
	 (setup-tide-mode)
	 (setq indent-tabs-mode nil)
	 (keys (current-local-map)
	       "C-," 'flycheck-next-error
	       "C-." 'flycheck-prev-error))
       #'setup-tide-mode)

;;;;;;;;;; SML
; (require 'sml-mode)
; (by-ext ("ml" "sml") sml-mode)

;;;;;;;;;; Lisp
(load (expand-file-name "~/quicklisp/slime-helper.el"))
(slime-setup '(slime-fancy))
(require 'clojure-mode)
(autoload 'enable-paredit-mode "paredit"
  "Turn on pseudo-structural editing of Lisp code."
  t)

(eval-after-load 'paredit
  '(keys paredit-mode-map
	 "<C-left>" 'backward-sexp
	 "<C-right>" 'forward-sexp
	 "{" 'paredit-open-curly
	 "}" 'paredit-close-curly))

(hooks (common-lisp lisp emacs-lisp scheme lisp-interaction slime clojure slime-repl)
       'enable-paredit-mode
       (lambda () (set-syntax-table (set-syntax-table clojure-mode-syntax-table))))

(hooks emacs-lisp
       (lambda ()
	 (keys (current-local-map)
	       "C-c RET" 'macroexpand-point
	       "C-c C-c" 'eval-defun)))

(by-ext ("ss" "scm" "rkt") scheme-mode)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; global key changes
(keys (current-global-map)
      "C-x C-m" 'execute-extended-command
      "C-x m" 'execute-extended-command
      "C-x C-w" 'kill-ring-save
      "C-w" 'backward-kill-sexp

      "C-x C-j" (lambda () (interactive) (other-window -1))
      "C-x C-k" 'other-window
      "C-x C-l" 'switch-to-minibuffer

      "<f7>" 'call-last-kbd-macro
      "C-S-z" 'redo
      "C-z" 'undo

      "C-s" 'isearch-forward-regexp
      "C-r" 'isearch-backward-regexp
      "C-M-c" 'clipboard-kill-ring-save
      "C-x C-x" 'clipboard-kill-region
      "C-x C-'" 'comment-or-uncomment-region
      "C-x C-g" 'comment-or-uncomment-region
      "C-x t" 'eshell
      "C-x f" 'browse-url-at-point

      "C-+" 'text-scale-increase
      "C-=" 'text-scale-decrease

      "C-x <C-left>" 'beginning-of-buffer
      "C-x <left>" 'beginning-of-buffer
      "C-x <C-right>" 'end-of-buffer
      "C-x <right>" 'end-of-buffer

      "<C-left>" 'backward-sexp
      "<C-right>" 'forward-sexp
      "C-f" 'forward-sexp
      "C-b" 'backward-sexp
      "C-M-b" 'backward-char
      "C-M-f" 'forward-char)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#242424" "#e5786d" "#95e454" "#cae682" "#8ac6f2" "#333366" "#ccaa8f" "#f6f3e8"])
 '(blog-default-blogger-title "language agnostic")
 '(blog-default-blogger-user 'leo\.zovic@gmail\.com)
 '(conv-color-map
   '(("env-switch-ui" . "LightSlateGray")
     ("env-switch-api" . "LightSkyBlue")
     ("grizzly.backend-DOXkManf-py3.7" . "LightSkyBlue")
     ("env-grizzly" . "LightGreen")
     ("env-terra" . "LightSeaGreen")
     ("env-pageclass" . "LightSalmon")
     ("env-panda" . "LightPink1")
     ("env-metastore" . "LightGreen")
     ("env-bearherd" . "LightGoldenrodYellow")
     ("env-pytrade" . "LightGoldenrod4")
     ("env-enlive" . "LightGoldenrod")
     ("env-growl" . "LightCyan")
     ("env-dupe-detection" . "LightBlue2")))
 '(custom-enabled-themes '(whiteboard))
 '(haskell-mode-hook
   '(turn-on-haskell-indent
     (lambda nil
       (auto-complete-mode t))) t)
 '(haskell-program-name "cabal repl" t)
 '(htmlize-output-type 'inline-css)
 '(icomplete-mode t)
 '(inf-ruby-implementations
   '(("ruby" . "irb2.1 --prompt default --noreadline -r irb/completion")
     ("jruby" . "jruby -S irb --prompt default --noreadline -r irb/completion")
     ("rubinius" . "rbx -r irb/completion")
     ("yarv" . "irb1.9 -r irb/completion")
     ("macruby" . "macirb -r irb/completion")
     ("pry" . "pry")))
 '(lpr-command "lp")
 '(menu-bar-mode nil)
 '(org-log-done 'note)
 '(package-selected-packages
   '(vue-mode company tide typescript-mode flycheck rjsx-mode magit agda2-mode sesman pyvenv dot-mode python-black slack pyenv-mode yaml-mode flycheck-pycheckers jedi flymake-python-pyflakes python-pylint cider clojure-mode haskell-mode markdown-mode paredit yasnippet auto-complete smart-tab highlight-parentheses aes elfeed))
 '(quack-programs
   '("racket" "bigloo" "cis" "csi" "csi -hygienic" "gosh" "gsi" "guile" "kawa" "mit-scheme" "mred -z" "mzscheme" "mzscheme -M errortrace" "mzscheme -il r6rs" "mzscheme -il typed-scheme" "mzscheme3m" "mzschemecgc" "rs" "scheme" "scheme48" "scsh" "sisc" "stklos" "sxi"))
 '(scheme-program-name "racket")
 '(show-paren-mode t)
 '(tool-bar-mode nil)
 '(tramp-copy-size-limit 1000000)
 '(tramp-default-method "ssh")
 '(tramp-inline-compress-start-size 1000000)
 '(transient-mark-mode t))
(put 'downcase-region 'disabled nil)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(git-commit-nonempty-second-line-face ((t (:inherit nil))))
 '(git-commit-overlong-summary-face ((t (:inherit nil))))
 '(git-commit-summary-face ((t (:inherit nil)))))

(put 'upcase-region 'disabled nil)

(set-colors-by (virtual-env-name))

(load-file (let ((coding-system-for-read 'utf-8))
                (shell-command-to-string "agda-mode locate")))